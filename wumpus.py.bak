from tkinter import *
import random
import sys
import os.path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from logic import *
from agents import *

class Gui(WumpusEnvironment):
    def __init(self, root, width=7, height=7):
        super().__init__(width, height, ExplorerProgram)
        self.root = root
        self.create_buttons()
        self.create_walls()
        self.elements = elements

    def create_walls(self):
        for row, button_row in enumerate(self.buttons):
            if row == 0 or row == len(self.buttons) - 1:
                for button in button_row:
                    button.config(text='W', state='disabled', disabledforeground='black')
            else:
                button_row[0].config(
                    text='W', state='disabled', disabledforeground='black')
                button_row[len(button_row) - 1].config(text='W', state='disabled', disabledforeground='black')

        self.buttons[1][1].config(text='E', state='disabled', disabledforeground='black')

    def read_env(self):
        for i, btn_row in enumerate(self.buttons):
            for j, btn in enumerate(btn_row):
                if(i != 0 and i != len(self.buttons) - 1) and (j != 0 and j != len(btn_row) - 1):
                    agt_loc = self.agents[0].locations
                    if self.some_things_at((i, j)) and (i, j) != agt_loc:
                        for thing in self.list_things_at((i, j)):
                            

# Returns an action based on the current percept
# TODO find pythonic way of having persistent kb and counter
def ExplorerProgram(percept):
    kb.tell(kb.make_percept_sentence(percept, counter))
    action = kb.ask(kb.make_action_query(counter))
    kb.tell(kb.make_action_sentence(action, counter))
    counter += 1
    return action


class Explorer(Agent):
    def __init__(self, program=None):
        super().__init__(program)
        self.location = (1, 1)
        self.direction = Direction("left")
        self.kb = WumpusKB()
        self.counter = 0

def main():
    root = Tk()
    root.title("Wumpus World")
    root.geometry("420x440")
    root.resizable(0,0)
    frame = Frame(root, bg='black')
    reset_button = Button(frame, text='Reset', height=2,
                            width=6, padx=2, pady=2)
    reset_button.pack(side='left')
    # TODO figure out which buttons we need exactly

    frame.pack(side='bottom')
    env = Gui(root)
    agt = Explorer(program=ExplorerProgram)
    env.add_thing(agt, location=(1,1))
    reset_button.config(command=lambda: env.reset_env(agt))
    root.mainloop()


if __name__ == "__main__":
    main()
